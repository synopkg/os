#!/usr/bin/python3

import datetime
import json

from dmt.DB import MirrorDB, MirrorCheckResult, GlobalInfo, TraceFileList
from dmt.Masterlist import Masterlist
from dmt.Mirrors import Mirrors

MASTERLIST='Mirrors.masterlist'
DBURL='postgresql:///mirror-status'
PRUNE_HOURS = 24.

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--masterlist', help='Mirrors.masterlist file', default=MASTERLIST)
    parser.add_argument('--dburl', help='database', default=DBURL)
    parser.add_argument('--prune-hours', help='delete mirrors that have not been checked in <x> hours', type=float, default=PRUNE_HOURS)
    args = parser.parse_args()

    masterlist = Masterlist(args.masterlist).entries
    mirrors = Mirrors(masterlist)

    db = MirrorDB(args.dburl)
    session = db.session()

    now = datetime.datetime.now()

    check_results = mirrors.check_all('Archive', 'http')
    for r in check_results:
        site = r['mirror'].site

        e = {}
        e['last_test'] = now
        if r['success']: e['last_noerror'] = now
        e['trace_master_timestamp'] = r.get('trace-master-timestamp')
        e['error'] = r['message'] if not r['success'] else None
        e['warning'] = '\n'.join(r['warnings']) if len(r['warnings']) > 0 else None

        MirrorDB.update_or_create(session, MirrorCheckResult, e, site = site)

        if 'traces' in r:
            mirrorcheckresultentry = session.query(MirrorCheckResult).filter_by(site = site).first()
            assert(mirrorcheckresultentry is not None)


            traces = json.dumps(r['traces'], separators=(',', ':'))
            tracefilelistentry = session.query(TraceFileList).filter_by(mirrorcheckresult_id = mirrorcheckresultentry.id).first()
            if tracefilelistentry is None:
                e = { 'last_test':            now,
                      'mirrorcheckresult_id': mirrorcheckresultentry.id,
                      'traces':               traces,
                      'traces_last_change':   now,
                    }
                instance = TraceFileList(**e)
                session.add(instance)
            else:
                tracefilelistentry.last_test = now
                if traces != tracefilelistentry.traces:
                    tracefilelistentry.traces = traces
                    tracefilelistentry.traces_last_change = now

    MirrorDB.update_or_create(session, GlobalInfo, {'last_test': now})
    session.query(MirrorCheckResult).filter(MirrorCheckResult.last_test < now - datetime.timedelta(hours=args.prune_hours)).delete()

    session.commit()
