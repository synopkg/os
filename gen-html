#!/usr/bin/python3

import datetime
from sqlalchemy import desc

import dmt.db as db
import dmt.helpers as helpers
from dmt.BasePageGenerator import BasePageGenerator

FTPMASTER = "ftp-master.debian.org"

class StatusGenerator(BasePageGenerator):
    def __init__(self, args):
        super().__init__(args)

    def run(self):
        now = datetime.datetime.now()

        checkrun = self.session.query(db.Checkrun).order_by(desc(db.Checkrun.timestamp)).first()

        ftpmastertraceq = self.session.query(db.Site, db.Mastertrace).filter_by(name = FTPMASTER)
        ftpmastertraceq = ftpmastertraceq.join(db.Mastertrace).filter(db.Mastertrace.trace_timestamp.isnot(None))
        ftpmastertraceq = ftpmastertraceq.join(db.Checkrun)
        ftpmastertraceq = ftpmastertraceq.order_by(desc(db.Checkrun.timestamp)).first()
        if ftpmastertraceq is not None:
            ftpmastertrace = ftpmastertraceq[1].trace_timestamp
        else:
            ftpmastertrace = now

        mastertraces = self.session.query(db.Site, db.Mastertrace).join(db.Mastertrace).filter_by(checkrun_id = checkrun.id)
        mirrors = []
        for site, mastertrace in mastertraces:
            x = {}
            x['site'] = site.__dict__
            x['mastertrace'] = mastertrace.__dict__

            x['site']['trace_url'] = helpers.get_tracedir(x['site'])
            if x['mastertrace']['trace_timestamp'] is not None:
                x['mastertrace']['agegroup'] = self._get_agegroup(ftpmastertrace - x['mastertrace']['trace_timestamp'])

            x['error'] = x['mastertrace']['error']
            mirrors.append(x)

        context = {
            'mirrors': mirrors,
            'last_run': checkrun.timestamp,
            'ftpmasterttrace': ftpmastertrace,
            'now': now,
        }
        template = self.tmplenv.get_template('mirror-status.html')
        template.stream(context).dump(self.args.outfile, errors='strict')

OUTFILE='mirror-status.html'

if __name__ == "__main__":
    parser = StatusGenerator.make_argument_parser(outfile = OUTFILE)
    args = parser.parse_args()
    StatusGenerator(args).run()
