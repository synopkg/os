#!/usr/bin/python3

import dateutil.relativedelta
import datetime
import jinja2

from dmt.DB import MirrorDB, MirrorCheckResult
from dmt.Masterlist import Masterlist
from dmt.Mirrors import Mirrors


class StatusGenerator:
    def __init__(self, args):
        self.args = args
        self.setup_db()
        self.setup_template_env()

    def _get_template_env(self):
        pass

    def setup_template_env(self):
        self.tmplenv = jinja2.Environment(
            loader = jinja2.FileSystemLoader(self.args.templatedir),
            autoescape = True,
            undefined = jinja2.StrictUndefined
        )

    def setup_db(self):
        self.db = MirrorDB(args.dbname)
        self.session = self.db.session()

    @staticmethod
    def _human_readable(rd):
        attrs = ['years', 'months', 'days', 'hours', 'minutes' ] # , 'seconds']
        elems = ['%d %s' % (getattr(rd, attr), getattr(rd, attr) > 1 and attr or attr[:-1]) for attr in attrs if getattr(rd, attr)]
        return (', '.join(elems))

    @staticmethod
    def _delta(t1, t2):
        rd = dateutil.relativedelta.relativedelta(t2, t1)
        td = t2 - t1
        return (td, StatusGenerator._human_readable(rd))

    @staticmethod
    def _get_agegroup(delta):
        # our template defines 8 agegroups from OK(0) to okish(2) to warn(3) and Warn(4-5) to Error(6-7)
        if delta < datetime.timedelta(hours=6):
            return "0"
        elif delta < datetime.timedelta(hours=11):
            return "1"
        elif delta < datetime.timedelta(hours=16):
            return "2"
        elif delta < datetime.timedelta(hours=24):
            return "3"
        elif delta < datetime.timedelta(hours=36):
            return "4"
        elif delta < datetime.timedelta(hours=48):
            return "5"
        elif delta < datetime.timedelta(days=4):
            return "6"
        else:
            return "7"

    def run(self):
        now = datetime.datetime.now()

        results = self.session.query(MirrorCheckResult).order_by(MirrorCheckResult.site).all()
        results = [ x.__dict__ for x in results]
        for x in results:
            if x['trace_master_timestamp'] is not None:
                (d, hr) = self._delta(x['trace_master_timestamp'], x['last_test'])
                x['agegroup'] = self._get_agegroup(d)
                x['age'] = hr
        context = {
            'mirrors': results,
            'now': now
        }
        template = self.tmplenv.get_template('mirror-status.html')
        template.stream(context).dump(self.args.outfile, errors='strict')


DBNAME='db.db'
OUTFILE='mirror-status.html'

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--dbname', help='database', default=DBNAME)
    parser.add_argument('--outfile', help='output-file', default=OUTFILE, type=argparse.FileType('w'))
    parser.add_argument('--templatedir', help='template directory', default='templates')
    args = parser.parse_args()

    g = StatusGenerator(args)
    g.run()
